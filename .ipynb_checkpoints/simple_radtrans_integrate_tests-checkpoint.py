import numpy as np
import scipy.integrate
import matplotlib.pyplot as plt
import analytic_pol_rad_trans
plt.ion()
from radtrans_integrate import radtrans_integrate
rhoarr = np.zeros((300,3))
jarr = np.tile(np.array([1.,0.,0.,0.]),300).reshape(300,4)
a = np.array([10.,4.,1.,7.])
a2 = np.array([5.,3.,2.,1.])
a2arr = np.tile(a2,150).reshape(150,4)
aarr = np.tile(a,150).reshape(150,4)
aarr = np.append(a2arr/3.,3.*aarr,axis=0)
Karr = (np.append(aarr,rhoarr,axis=1))
x = np.cumsum(np.zeros(300)+1e-2)
tau = np.append(0.,scipy.integrate.cumtrapz(Karr[:,0],x))
radtrans_integrate.init_radtrans_integrate_data(0,4,300,300,10.,0.1,1e-8,1e-6,1e-2)
radtrans_integrate.integrate(x[::-1],jarr[:,:],Karr[:,:],tau,4)
isteplsoda = radtrans_integrate.intensity.copy()
istep,Qstep,Pstep,imstep,deltastep,dxstep,QQstep,PPstep,immstep,itstep = analytic_pol_rad_trans.delo_intensity(dx=(np.zeros(300-1)+1e-2),a=aarr,I0=np.array([0.,0.,0.,0.]),rho=rhoarr,j=jarr,thin=1e-2)
jmean = 1.
jsinarr = jmean + 0.5*np.sin(2.*np.arccos(-1.)*np.transpose(np.tile(x,4).reshape(4,300))/0.6)
amean = np.array([1.,0.3,0.6,0.2])
asinarr = np.tile(amean,300).reshape(300,4)
asinarr = asinarr + 0.5*np.sin(2.*np.arccos(-1.)*np.transpose(np.tile(x,4).reshape(4,300))/0.6)
rhomean = np.array([-0.4,0.4,0.1])
rhosinarr = np.tile(rhomean,300).reshape(300,3)
rhosinarr = rhosinarr + 0.2*np.sin(2.*np.arccos(-1.)*np.transpose(np.tile(x,3).reshape(3,300))/0.75)
apos = np.array([0.5,1.2,2.6,1.4])
apeak = amean.copy()*3.
awidth = 0.1
agarr = np.tile(apeak,300).reshape(300,4)*np.exp(-(np.transpose(np.tile(x,4).reshape(4,300))-np.tile(apos,300).reshape(300,4))**2./2./awidth**2.)
rhopeak = rhomean.copy()*3.
rhopos = np.array([0.9,2.2,2.5])
rhowidth = 0.07
rhogarr = np.tile(rhopeak,300).reshape(300,3)*np.exp(-(np.transpose(np.tile(x,3).reshape(3,300))-np.tile(rhopos,300).reshape(300,3))**2./2./rhowidth**2.)
ig,Qg,Pg,img,deltag,dxg,QQg,PPg,immg,itg = analytic_pol_rad_trans.delo_intensity(dx=(np.zeros(300-1)+1e-2),a=agarr,I0=np.array([0.,0.,0.,0.]),rho=rhogarr,j=jarr)
isin,Qsin,Psin,imsin,deltasin,dxsin,QQsin,PPsin,immsin,itsin = analytic_pol_rad_trans.delo_intensity(dx=(np.zeros(300-1)+1e-2),a=asinarr,I0=np.array([0.,0.,0.,0.]),rho=rhosinarr,j=jsinarr,thin=1e-2)
Karr = np.append(agarr,rhogarr,axis=1)
tau = np.append(0.,scipy.integrate.cumtrapz(Karr[:,0],x))
radtrans_integrate.integrate(x[::-1],jarr[:,:],Karr[:,:],tau,4)
iglsoda = radtrans_integrate.intensity.copy()
Karr = np.append(asinarr,rhosinarr,axis=1)
tau = np.append(0.,scipy.integrate.cumtrapz(Karr[:,0],x))
radtrans_integrate.integrate(x[::-1],jsinarr[:,:],Karr[:,:],tau,4)
isinlsoda = radtrans_integrate.intensity.copy()
radtrans_integrate.del_radtrans_integrate_data()
radtrans_integrate.init_radtrans_integrate_data(1,4,300,300,10.,0.1,1e-8,1e-6,1e-2)
radtrans_integrate.integrate(x[::-1],jsinarr[:,:],Karr[:,:],tau,4)
isindelo = radtrans_integrate.intensity.copy()
Karr = np.append(agarr,rhogarr,axis=1)
tau = np.append(0.,scipy.integrate.cumtrapz(Karr[:,0],x))
radtrans_integrate.integrate(x[::-1],jarr[:,:],Karr[:,:],tau,4)
igdelo = radtrans_integrate.intensity.copy()
Karr = (np.append(aarr,rhoarr,axis=1))
tau = np.append(0.,scipy.integrate.cumtrapz(Karr[:,0],x))
radtrans_integrate.integrate(x[::-1],jarr[:,:],Karr[:,:],tau,4)
istepdelo = radtrans_integrate.intensity.copy()
radtrans_integrate.del_radtrans_integrate_data()

